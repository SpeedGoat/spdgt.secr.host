% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc_SMR.R
\name{in_poly}
\alias{in_poly}
\title{Check if Point is Inside Polygon Using Ray-Casting Algorithm}
\usage{
in_poly(point, vertices)
}
\arguments{
\item{point}{Numeric vector. A vector of length 2 containing x, y coordinates
of the point to check.}

\item{vertices}{Matrix or data frame. A two-column matrix or data frame containing
the x, y coordinates of the polygon vertices in order. The polygon
does not need to be closed (the function handles this automatically).}
}
\value{
Logical. TRUE if the point lies within the polygon, FALSE otherwise.
}
\description{
Determines whether a 2D point lies within a polygon using the ray-casting
algorithm (also known as the even-odd rule or crossing number algorithm). The
function automatically closes the polygon by connecting the last vertex to the first.
}
\details{
The ray-casting algorithm works by:
\enumerate{
\item Casting a horizontal ray from the test point to the right
\item Counting the number of times this ray intersects the polygon edges
\item Using the even-odd rule to determine inclusion:
\itemize{
\item Odd number of intersections: point is inside
\item Even number of intersections: point is outside
}
}

Implementation details:
\enumerate{
\item Input Validation:
\itemize{
\item Ensures point is a length-2 numeric vector
\item Verifies vertices is a 2-column matrix/data frame
}
\item Polygon Preparation:
\itemize{
\item Automatically closes the polygon by appending first vertex
\item Processes edges sequentially
}
\item Intersection Testing:
\itemize{
\item Tests if horizontal ray intersects each edge
\item Handles special cases like vertices and horizontal edges
}
}
}
\examples{
\dontrun{
# Create a triangular polygon
vertices <- matrix(c(
  0,0,   # Bottom-left
  2,0,   # Bottom-right
  1,2    # Top
), ncol=2, byrow=TRUE)

# Test points
in_poly(c(1,1), vertices)    # TRUE - point inside triangle
in_poly(c(0,2), vertices)    # FALSE - point outside triangle
in_poly(c(1,0), vertices)    # TRUE - point on edge

# Create a complex polygon
vertices <- matrix(c(
  0,0,    # Start
  2,0,
  2,2,
  1,1,
  0,2     # End
), ncol=2, byrow=TRUE)

# Test points in complex polygon
in_poly(c(0.5,0.5), vertices)  # TRUE
in_poly(c(1.5,1.5), vertices)  # TRUE
in_poly(c(0.5,1.5), vertices)  # FALSE
}
}
