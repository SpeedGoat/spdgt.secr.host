% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc_SMR.R
\name{generate_constraints}
\alias{generate_constraints}
\title{Generate Constraint Matrices for Sample Data}
\usage{
generate_constraints(y_sight_latent, obstype, G_use)
}
\arguments{
\item{y_sight_latent}{Array. Latent capture histories containing detection data.}

\item{obstype}{Character. Observation type, with special handling for "bernoulli".}

\item{G_use}{Matrix. Genetic data matrix where rows represent samples and columns
represent genetic markers.}
}
\value{
A list containing:
\itemize{
\item constraints: Matrix. Binary constraint matrix where 0 indicates incompatible
sample pairs and 1 indicates compatible pairs.
\item binconstraints: Logical. TRUE if Bernoulli-specific constraints were added,
FALSE otherwise.
}
}
\description{
Generates constraint matrices for sample data in capture-recapture studies by evaluating
genetic compatibility between samples and handling special cases for Bernoulli-type
observations. The function creates constraints that prevent incompatible samples from
being assigned to the same individual.
}
\details{
The function generates constraints in two phases:
\enumerate{
\item Genetic Compatibility:
\itemize{
\item Creates an n Ã— n matrix where n is the number of samples
\item Compares genetic markers between all sample pairs
\item Sets constraint to 0 if samples have incompatible genetic markers
}
\item Bernoulli-specific Constraints (if applicable):
\itemize{
\item Identifies samples from same trap and occasion
\item Prevents assignment to same individual when detected simultaneously
\item Ensures constraint matrix symmetry
}
}
}
\examples{
\dontrun{
# Create example data
y_sight_latent <- array(0, dim=c(3,2,2))  # 3 samples, 2 occasions, 2 traps
y_sight_latent[1,1,1] <- 1
y_sight_latent[2,1,2] <- 1
y_sight_latent[3,1,1] <- 1

# Genetic data with 2 markers
G_use <- matrix(c(
  1,2,  # Sample 1
  1,0,  # Sample 2
  2,2   # Sample 3
), ncol=2, byrow=TRUE)

# Generate constraints
result <- generate_constraints(
  y_sight_latent = y_sight_latent,
  obstype = "bernoulli",
  G_use = G_use
)
}
}
