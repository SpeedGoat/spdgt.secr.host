% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc_SMR.R
\name{process_spatial_points}
\alias{process_spatial_points}
\title{Process and Initialize Spatial Points for Capture-Recapture Analysis}
\usage{
process_spatial_points(M, state_space, y_sight_true, Xall, y_mark = NULL)
}
\arguments{
\item{M}{Integer. Total number of individuals to process.}

\item{state_space}{List. Defines the study area with components:
\itemize{
\item xlim: Vector of length 2 with min, max x-coordinates
\item ylim: Vector of length 2 with min, max y-coordinates
\item useverts: Logical. If TRUE, uses vertex-defined state space
\item vertices: Matrix of vertex coordinates (required if useverts=TRUE)
}}

\item{y_sight_true}{Matrix. Sighting history matrix where rows represent
individuals and columns represent occasions/locations.}

\item{Xall}{Matrix. Coordinates of all sampling locations.}

\item{y_mark}{Matrix. Optional marking history matrix. If provided, will be
combined with sighting data.}
}
\value{
Matrix. An M Ã— 2 matrix of processed spatial coordinates where each row
contains x, y coordinates for an individual.
}
\description{
Initializes and processes spatial locations for individuals in a capture-recapture
study, handling both marked and unmarked individuals. The function generates
random starting locations, processes observed capture locations, and ensures all
points fall within the defined state space.
}
\details{
The function processes spatial points in several steps:
\enumerate{
\item Initial Point Generation:
\itemize{
\item Randomly generates M points within xlim/ylim bounds
\item Uses uniform distribution for initial placement
}
\item Capture Location Processing:
\itemize{
\item Combines marking and sighting histories if both available
\item For individuals with captures/sightings:
\itemize{
\item Single capture: Uses exact capture location
\item Multiple captures: Uses mean location of captures
}
}
\item State Space Validation:
\itemize{
\item If using vertices (useverts=TRUE):
\itemize{
\item Checks if points fall within polygon
\item Regenerates points that fall outside until valid
\item Uses point_in_area function for validation
}
}
}
}
