% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc_SMR.R
\name{point_in_area}
\alias{point_in_area}
\title{Check if Point is Within State Space}
\usage{
point_in_area(point, state_space)
}
\arguments{
\item{point}{Numeric vector. A vector of length 2 containing x, y coordinates
of the point to check.}

\item{state_space}{List. A list defining the state space with components:
\itemize{
\item useverts: Logical. If TRUE, uses polygon vertices; if FALSE, uses rectangular bounds
\item xlim: Numeric vector of length 2. min, max x-coordinates for rectangular bounds
\item ylim: Numeric vector of length 2. min, max y-coordinates for rectangular bounds
\item vertices: Matrix. Required if useverts=TRUE. Matrix of polygon vertex coordinates
}}
}
\value{
Logical. TRUE if the point lies within the state space, FALSE otherwise.
}
\description{
Determines whether a 2D point lies within a defined state space, which can be
either a rectangular boundary or an arbitrary polygon defined by vertices.
}
\details{
The function supports two methods of checking point inclusion:
\enumerate{
\item Rectangular Bounds (useverts = FALSE):
\itemize{
\item Uses simple coordinate comparison
\item Checks if point lies within xlim and ylim ranges
\item Faster but limited to rectangular areas
}
\item Polygon Bounds (useverts = TRUE):
\itemize{
\item Uses point-in-polygon algorithm
\item Supports arbitrary polygon shapes
\item More flexible but computationally more intensive
}
}
}
\examples{
\dontrun{
# Check point in rectangular state space
rect_space <- list(
  useverts = FALSE,
  xlim = c(0, 10),
  ylim = c(0, 10)
)
point_in_area(c(5, 5), rect_space)  # TRUE
point_in_area(c(-1, 5), rect_space) # FALSE

# Check point in polygon state space
poly_space <- list(
  useverts = TRUE,
  vertices = matrix(c(
    0,0,
    10,0,
    10,10,
    5,15,
    0,10
  ), ncol=2, byrow=TRUE)
)
point_in_area(c(5, 5), poly_space)   # TRUE
point_in_area(c(5, 12), poly_space)  # TRUE
point_in_area(c(-1, 5), poly_space)  # FALSE
}
}
